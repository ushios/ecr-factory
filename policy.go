package ecrf

import (
	"fmt"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/ecr"
	"github.com/aws/aws-sdk-go/service/iam"
	"github.com/ushios/iamgo"
)

const (
	PullerPolicyName  = "ecr-pull-%s"
	PullerDescription = "Pull %s. Generated by ecr-factory"
	PusherPolicyName  = "ecr-push-%s"
	PusherDescription = "Push to %s. Generated by ecr-factory"
)

// CreatePullerPolicy create policy
func CreatePullerPolicy(i *iam.IAM, repo *ecr.Repository) (*iam.Policy, error) {
	param, err := pulleerParam(repo)
	if err != nil {
		return nil, err
	}

	resp, err := i.CreatePolicy(param)
	if err != nil {
		return nil, err
	}

	return resp.Policy, nil
}

// CreatePusherPolicy create policy
func CreatePusherPolicy(i *iam.IAM, repo *ecr.Repository) (*iam.Policy, error) {
	param, err := pulleerParam(repo)
	if err != nil {
		return nil, err
	}

	resp, err := i.CreatePolicy(param)
	if err != nil {
		return nil, err
	}

	return resp.Policy, nil
}

func pulleerParam(repo *ecr.Repository) (*iam.CreatePolicyInput, error) {
	p := pusherPolicy(repo)
	b, err := p.PolicyScheme()
	if err != nil {
		return nil, err
	}

	param := &iam.CreatePolicyInput{
		PolicyName:     aws.String(fmt.Sprintf(PullerPolicyName, *(repo.RepositoryName))),
		Description:    aws.String(fmt.Sprintf(PullerDescription, *(repo.RepositoryName))),
		PolicyDocument: aws.String(string(b)),
	}

	return param, nil
}

func pullerPolicy(repo *ecr.Repository) iamgo.Policy {
	p := iamgo.NewLatestPolicy(
		[]iamgo.StatementEntry{
			iamgo.StatementEntry{
				Effect: iamgo.Allow,
				Action: []string{
					"ecr:GetAuthorizationToken",
				},
				Resource: "*",
			},
			iamgo.StatementEntry{
				Effect: iamgo.Allow,
				Action: []string{
					"ecr:GetAuthorizationToken",
					"ecr:BatchCheckLayerAvailability",
					"ecr:GetDownloadUrlForLayer",
					"ecr:GetRepositoryPolicy",
					"ecr:DescribeRepositories",
					"ecr:ListImages",
					"ecr:DescribeImages",
					"ecr:BatchGetImage",
				},
				Resource: *(repo.RepositoryArn),
			},
		},
	)

	return p
}

func pusherParam(repo *ecr.Repository) (*iam.CreatePolicyInput, error) {
	p := pusherPolicy(repo)
	b, err := p.PolicyScheme()
	if err != nil {
		return nil, err
	}

	param := &iam.CreatePolicyInput{
		PolicyName:     aws.String(fmt.Sprintf(PusherPolicyName, *(repo.RepositoryName))),
		Description:    aws.String(fmt.Sprintf(PusherDescription, *(repo.RepositoryName))),
		PolicyDocument: aws.String(string(b)),
	}

	return param, nil
}

func pusherPolicy(repo *ecr.Repository) iamgo.Policy {
	p := iamgo.NewLatestPolicy(
		[]iamgo.StatementEntry{
			iamgo.StatementEntry{
				Effect: iamgo.Allow,
				Action: []string{
					"ecr:GetAuthorizationToken",
				},
				Resource: "*",
			},
			iamgo.StatementEntry{
				Effect: iamgo.Allow,
				Action: []string{
					"ecr:GetAuthorizationToken",
					"ecr:BatchCheckLayerAvailability",
					"ecr:GetDownloadUrlForLayer",
					"ecr:GetRepositoryPolicy",
					"ecr:DescribeRepositories",
					"ecr:ListImages",
					"ecr:DescribeImages",
					"ecr:BatchGetImage",
					"ecr:InitiateLayerUpload",
					"ecr:UploadLayerPart",
					"ecr:CompleteLayerUpload",
					"ecr:PutImage",
				},
				Resource: *(repo.RepositoryArn),
			},
		},
	)

	return p
}
